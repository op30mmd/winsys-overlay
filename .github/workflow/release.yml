name: Build and Release

on:
  # Allows you to run this workflow manually from the Actions tab on GitHub.
  workflow_dispatch:
  # Triggers the workflow on a push event, but only for version tags (e.g., v1.0, v2.3.4).
  push:
    tags:
      - 'v*'

env:
  # =================================================================
  # == CONFIGURATION FOR YOUR SELF-HOSTED RUNNER
  # =================================================================
  # Adjust these paths to match your self-hosted runner's environment.
  #
  # Path to your Qt 6 installation directory.
  QT_DIR: C:\Qt\6.9.1\msvc2022_64
  #
  # Path to the Visual Studio Developer Command Prompt initialization script.
  # This is the standard way to set up the MSVC compiler environment.
  VCVARS_PATH: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat"

jobs:
  build-and-release:
    # This job runs on a self-hosted runner, as requested.
    # Ensure your runner has a label 'self-hosted'.
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Version Number
        id: get_version
        # Use the tag name for the version. If not a tag, generate a dev version string.
        run: |
          if ("${{ github.ref_type }}" -eq "tag") {
            $version = "${{ github.ref_name }}"
          } else {
            $date = Get-Date -Format "yyyy.MM.dd"
            $version = "dev-$date-${{ github.run_number }}"
          }
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: powershell

      - name: Configure CMake
        run: |
          call "%VCVARS_PATH%"
          cmake -S . -B build -DCMAKE_PREFIX_PATH="%QT_DIR%"
        shell: cmd

      - name: Build with CMake
        run: |
          call "%VCVARS_PATH%"
          cmake --build build --config Release
        shell: cmd

      - name: Package Release Files
        id: package
        run: |
          $archiveName = "winsys-overlay-${{ steps.get_version.outputs.VERSION }}.zip"
          Compress-Archive -Path build/Release/* -DestinationPath $archiveName -Force
          "ARCHIVE_NAME=$archiveName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: powershell

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.package.outputs.ARCHIVE_NAME }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: "Automated release for version ${{ github.ref_name }}."