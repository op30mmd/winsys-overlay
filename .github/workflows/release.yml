name: Build and Release

on:
  workflow_dispatch: {}
  push:
    tags:
      - 'v*'

env:
  QT_DIR: C:\Qt\6.9.1\msvc2022_64
  VCVARS_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat'
  UPX_PATH: 'C:\upx\upx.exe'
  SEVENZIP_PATH: 'C:\Program Files\7-Zip\7z.exe'

jobs:
  build-and-release:
    runs-on: self-hosted
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Version Number
        id: get_version
        run: |
          if ("${{ github.ref_type }}" -eq "tag") {
            $version = "${{ github.ref_name }}"
          } else {
            $date = Get-Date -Format "yyyy.MM.dd"
            $version = "dev-$date-${{ github.run_number }}"
          }
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: powershell

      - name: Install NSIS via Chocolatey
        run: choco install nsis -y
        shell: cmd

      - name: Configure CMake
        run: |
          call "%VCVARS_PATH%"
          cmake -S . -B build -DCMAKE_PREFIX_PATH="%QT_DIR%" -DCMAKE_BUILD_TYPE=Release
        shell: cmd

      - name: Build with CMake
        run: |
          call "%VCVARS_PATH%"
          cmake --build build --config Release
        shell: cmd
      
      - name: Deploy Qt Dependencies (Minimal)
        if: env.QT_DIR != ''
        run: |
          call "%VCVARS_PATH%"
          echo "Deploying minimal Qt dependencies for winsys-overlay.exe..."
          "%QT_DIR%\bin\windeployqt.exe" --release --no-translations --no-system-d3d-compiler --no-opengl-sw --no-compiler-runtime --force build\bin\Release\winsys-overlay.exe
          
          echo "Cleaning up unnecessary Qt files..."
          cd build\bin\Release
          
          REM Remove unnecessary Qt modules
          del /Q /F Qt6Quick*.dll 2>nul
          del /Q /F Qt6Qml*.dll 2>nul
          del /Q /F Qt6Network*.dll 2>nul
          del /Q /F Qt6Sql*.dll 2>nul
          del /Q /F Qt6Test*.dll 2>nul
          del /Q /F Qt6WebEngine*.dll 2>nul
          del /Q /F Qt6Multimedia*.dll 2>nul
          del /Q /F opengl32sw.dll 2>nul
          del /Q /F d3dcompiler_*.dll 2>nul
          
          REM Keep only essential platform plugin
          cd platforms
          for %%f in (*.dll) do if not "%%f"=="qwindows.dll" del "%%f"
          cd ..
          
          REM Keep only essential image format plugins
          cd imageformats
          for %%f in (*.dll) do (
            if not "%%f"=="qico.dll" if not "%%f"=="qjpeg.dll" if not "%%f"=="qpng.dll" if not "%%f"=="qgif.dll" del "%%f"
          )
          cd ..
          
          echo "Qt cleanup completed."
        shell: cmd

      - name: Compress Executables with UPX (Optional)
        if: env.UPX_PATH != ''
        run: |
          if exist "%UPX_PATH%" (
            echo "Compressing executables with UPX..."
            
            REM Compress main executable (C++ - usually works well)
            echo "Compressing winsys-overlay.exe..."
            "%UPX_PATH%" --best --lzma build\bin\Release\winsys-overlay.exe && (
              echo "✓ Successfully compressed winsys-overlay.exe"
            ) || (
              echo "✗ Warning: UPX compression failed for winsys-overlay.exe"
            )
            
            REM Try to compress TempReader.exe (.NET - might fail)
            echo "Attempting to compress TempReader.exe (.NET executable)..."
            "%UPX_PATH%" --best --lzma --force build\bin\Release\TempReader.exe && (
              echo "✓ Successfully compressed TempReader.exe"
            ) || (
              echo "✗ Info: UPX compression failed for TempReader.exe (normal for .NET executables)"
            )
            
            echo "UPX compression process completed (failures are non-critical)."
          ) else (
            echo "UPX not found at %UPX_PATH%, skipping compression."
          )
        shell: cmd
        continue-on-error: true

      - name: Package with CPack
        id: package_installer
        run: |
          call "%VCVARS_PATH%"
          cd build
          echo "Running CPack to create installer..."
          cpack -C Release -G NSIS
          echo "CPack finished. Searching for installer file..."
          for %%F in (WinSysOverlay-*.exe) do (
            echo "Found installer: %%F"
            echo "INSTALLER_NAME=%%F" >> %GITHUB_OUTPUT%
            goto :found
          )
          echo "ERROR: CPack installer WinSysOverlay-*.exe not found in build directory!"
          exit /b 1
          :found
        shell: cmd

      - name: Display Package Size
        run: |
          set "INSTALLER_PATH=build\${{ steps.package_installer.outputs.INSTALLER_NAME }}"
          for %%A in ("%INSTALLER_PATH%") do (
            echo "Installer size: %%~zA bytes"
            set /a SIZE_MB=%%~zA/1024/1024
            echo "Installer size: !SIZE_MB! MB"
          )
        shell: cmd

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: winsys-overlay-installer
          path: build/${{ steps.package_installer.outputs.INSTALLER_NAME }}

      - name: Compress Installer with 7-Zip
        id: package_7z
        if: env.SEVENZIP_PATH != '' && startsWith(github.ref, 'refs/tags/')
        run: |
          set "INSTALLER_PATH=build\${{ steps.package_installer.outputs.INSTALLER_NAME }}"
          set "ARCHIVE_7Z_NAME=winsys-overlay-${{ steps.get_version.outputs.VERSION }}.7z"
          echo "Compressing %INSTALLER_PATH% to %ARCHIVE_7Z_NAME%..."
          "%SEVENZIP_PATH%" a -t7z -m0=lzma2 -mx=9 -mfb=64 -md=32m -ms=on "%ARCHIVE_7Z_NAME%" "%INSTALLER_PATH%"
          echo "ARCHIVE_7Z_PATH=%ARCHIVE_7Z_NAME%" >> %GITHUB_OUTPUT%
          
          REM Display compressed size
          for %%A in ("%ARCHIVE_7Z_NAME%") do (
            echo "Compressed size: %%~zA bytes"
            set /a SIZE_MB=%%~zA/1024/1024
            echo "Compressed size: !SIZE_MB! MB"
          )
        shell: cmd

      - name: Upload Compressed Artifact
        if: steps.package_7z.outputs.ARCHIVE_7Z_PATH != ''
        uses: actions/upload-artifact@v4
        with:
          name: winsys-overlay-7z
          path: ${{ steps.package_7z.outputs.ARCHIVE_7Z_PATH }}

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/${{ steps.package_installer.outputs.INSTALLER_NAME }}
            ${{ steps.package_7z.outputs.ARCHIVE_7Z_PATH }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for version ${{ github.ref_name }}.
            
            ## Download Options
            - **Installer** (`${{ steps.package_installer.outputs.INSTALLER_NAME }}`): The standard installer with optimized Qt deployment.
            - **7-Zip Archive** (`${{ steps.package_7z.outputs.ARCHIVE_7Z_PATH }}`): The installer in a highly compressed 7z archive for minimal download size.
            
            ## Size Optimizations
            - Removed unnecessary Qt modules (Quick, QML, Network, SQL, etc.)
            - Kept only essential platform plugins (qwindows.dll)
            - Minimized imageformat plugins to basic formats
            - Applied LZMA compression to installer
            - Optional UPX compression for executables