name: Build and Release

on:
  workflow_dispatch: {}
  push:
    tags:
      - 'v*'

env:
  QT_DIR: C:\Qt\6.9.1\msvc2022_64
  VCVARS_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat'
  UPX_PATH: 'C:\upx\upx.exe'

jobs:
  build-and-release:
    runs-on: self-hosted
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Version Number
        id: get_version
        run: |
          if ("${{ github.ref_type }}" -eq "tag") {
            $version = "${{ github.ref_name }}"
          } else {
            $date = Get-Date -Format "yyyy.MM.dd"
            $version = "dev-$date-${{ github.run_number }}"
          }
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: powershell

      - name: Configure CMake
        run: |
          call "%VCVARS_PATH%"
          cmake -S . -B build -DCMAKE_PREFIX_PATH="%QT_DIR%"
        shell: cmd

      - name: Build with CMake
        run: |
          call "%VCVARS_PATH%"
          cmake --build build --config Release
        shell: cmd

      - name: Deploy Qt Dependencies
        run: |
          echo "=== Deploying Qt dependencies ==="
          %QT_DIR%\bin\windeployqt.exe --release --no-translations --verbose 2 build/bin/Release/winsys-overlay.exe
          
          echo "=== Verifying deployment structure ==="
          dir build\bin\Release
          
          echo "=== Checking platform plugins ==="
          if exist build\bin\Release\platforms (
            dir build\bin\Release\platforms
            if exist build\bin\Release\platforms\qwindows.dll (
              echo "✓ qwindows.dll found"
            ) else (
              echo "✗ qwindows.dll missing"
            )
          ) else (
            echo "✗ platforms directory missing"
          )
          
          echo "=== Manual platform plugin deployment ==="
          if not exist build\bin\Release\platforms mkdir build\bin\Release\platforms
          copy "%QT_DIR%\plugins\platforms\qwindows.dll" build\bin\Release\platforms\
          copy "%QT_DIR%\plugins\platforms\qminimal.dll" build\bin\Release\platforms\
          
          echo "=== Copying additional required DLLs ==="
          copy "%QT_DIR%\bin\Qt6Core.dll" build\bin\Release\
          copy "%QT_DIR%\bin\Qt6Gui.dll" build\bin\Release\
          copy "%QT_DIR%\bin\Qt6Widgets.dll" build\bin\Release\
          
          echo "=== Final verification ==="
          dir build\bin\Release
          dir build\bin\Release\platforms
        shell: cmd

      - name: Test Application Launch
        run: |
          echo "=== Testing application launch ==="
          cd build\bin\Release
          echo "Current directory:"
          cd
          echo "Files in directory:"
          dir
          echo "Attempting to launch application for 3 seconds..."
          start /wait /b winsys-overlay.exe &
          timeout /t 3 /nobreak > nul
          taskkill /f /im winsys-overlay.exe > nul 2>&1 || echo "Application may have already closed"
          echo "Application test completed"
        shell: cmd
        continue-on-error: true

      - name: Optimize and Compress Release Files
        if: env.UPX_PATH != ''
        run: |
          echo "--- Reducing package size by removing unnecessary files ---"
          del /q /s build\bin\Release\*.pdb > nul 2>&1

          echo "--- Compressing native executables and DLLs with UPX ---"
          echo "Compressing main executable..."
          "%UPX_PATH%" --best --lzma build/bin/Release/winsys-overlay.exe
          
          echo "Compressing native DLLs (forcing due to GUARD_CF)..."
          for %%F in (build\bin\Release\Qt6*.dll) do (
            echo Compressing %%F
            "%UPX_PATH%" --best --lzma --force "%%F"
          )
          
          echo "Compressing platform plugins..."
          if exist build\bin\Release\platforms\qwindows.dll (
            echo Compressing qwindows.dll
            "%UPX_PATH%" --best --lzma --force build\bin\Release\platforms\qwindows.dll
          )
          if exist build\bin\Release\platforms\qminimal.dll (
            echo Compressing qminimal.dll
            "%UPX_PATH%" --best --lzma --force build\bin\Release\platforms\qminimal.dll
          )

          echo "Skipping .NET assemblies (TempReader.exe, LibreHardwareMonitorLib.dll) as they are not supported by UPX."
        shell: cmd

      - name: Final Application Test
        run: |
          echo "=== Final application test after compression ==="
          cd build\bin\Release
          echo "Testing compressed application..."
          start /wait /b winsys-overlay.exe &
          timeout /t 3 /nobreak > nul
          taskkill /f /im winsys-overlay.exe > nul 2>&1 || echo "Application may have already closed"
          echo "Final test completed"
        shell: cmd
        continue-on-error: true

      - name: Package Release Files
        id: package
        run: |
          $archiveName = "winsys-overlay-${{ steps.get_version.outputs.VERSION }}.zip"
          Compress-Archive -Path build/bin/Release/* -DestinationPath $archiveName -Force
          "ARCHIVE_NAME=$archiveName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: powershell

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: winsys-overlay-build
          path: ${{ steps.package.outputs.ARCHIVE_NAME }}

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.package.outputs.ARCHIVE_NAME }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: "Automated release for version ${{ github.ref_name }}."
