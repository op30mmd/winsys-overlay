name: Build and Release

on:
  workflow_dispatch: {}
  push:
    tags:
      - 'v*'

env:
  QT_DIR: C:\Qt\6.9.1\msvc2022_64
  VCVARS_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat'
  UPX_PATH: 'C:\upx\upx.exe'
  SEVENZIP_PATH: 'C:\Program Files\7-Zip\7z.exe'

jobs:
  build-and-release:
    runs-on: self-hosted
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Version Number
        id: get_version
        run: |
          if ("${{ github.ref_type }}" -eq "tag") {
            $version = "${{ github.ref_name }}"
          } else {
            $date = Get-Date -Format "yyyy.MM.dd"
            $version = "dev-$date-${{ github.run_number }}"
          }
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: powershell

      - name: Setup NSIS
        uses: Installer-Actions/setup-nsis@v1

      - name: Configure CMake
        run: |
          call "%VCVARS_PATH%"
          cmake -S . -B build -DCMAKE_PREFIX_PATH="%QT_DIR%"
        shell: cmd

      - name: Build with CMake
        run: |
          call "%VCVARS_PATH%"
          cmake --build build --config Release
        shell: cmd

      - name: Package with CPack
        id: package_installer
        run: |
          call "%VCVARS_PATH%"
          cd build
          echo "Running CPack to create installer..."
          cpack -C Release
          echo "CPack finished. Searching for installer file..."
          for %%F in (*.exe) do (
            echo "Found installer: %%F"
            echo "INSTALLER_NAME=%%F" >> %GITHUB_OUTPUT%
            goto :found
          )
          echo "ERROR: CPack installer *.exe not found in build directory!"
          exit /b 1
          :found
        shell: cmd

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: winsys-overlay-installer
          path: build/${{ steps.package_installer.outputs.INSTALLER_NAME }}

      - name: Compress Installer with 7-Zip
        id: package_7z
        if: env.SEVENZIP_PATH != '' && startsWith(github.ref, 'refs/tags/')
        run: |
          set "INSTALLER_PATH=build\${{ steps.package_installer.outputs.INSTALLER_NAME }}"
          set "ARCHIVE_7Z_NAME=winsys-overlay-${{ steps.get_version.outputs.VERSION }}.7z"
          echo "Compressing %INSTALLER_PATH% to %ARCHIVE_7Z_NAME%..."
          "%SEVENZIP_PATH%" a -t7z -m0=lzma2 -mx=9 -mfb=64 -md=32m -ms=on "%ARCHIVE_7Z_NAME%" "%INSTALLER_PATH%"
          echo "ARCHIVE_7Z_PATH=%ARCHIVE_7Z_NAME%" >> %GITHUB_OUTPUT%
        shell: cmd

      - name: Upload Compressed Artifact
        if: steps.package_7z.outputs.ARCHIVE_7Z_PATH != ''
        uses: actions/upload-artifact@v4
        with:
          name: winsys-overlay-7z
          path: ${{ steps.package_7z.outputs.ARCHIVE_7Z_PATH }}

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/${{ steps.package_installer.outputs.INSTALLER_NAME }}
            ${{ steps.package_7z.outputs.ARCHIVE_7Z_PATH }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for version ${{ github.ref_name }}.
            
            ## Download Options
            - **Installer** (`${{ steps.package_installer.outputs.INSTALLER_NAME }}`): The standard, uncompressed installer.
            - **7-Zip Archive** (`${{ steps.package_7z.outputs.ARCHIVE_7Z_PATH }}`): The installer in a highly compressed 7z archive for a smaller download.
