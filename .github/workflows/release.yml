name: Build and Release

on:
  workflow_dispatch: {}
  push:
    tags:
      - 'v*'

env:
  QT_DIR: C:\Qt\6.9.1\msvc2022_64
  VCVARS_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat'
  UPX_PATH: 'C:\upx\upx.exe'
  SEVENZIP_PATH: 'C:\Program Files\7-Zip\7z.exe'

jobs:
  build-and-release:
    runs-on: self-hosted
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Version Number
        id: get_version
        run: |
          if ("${{ github.ref_type }}" -eq "tag") {
            $version = "${{ github.ref_name }}"
          } else {
            $date = Get-Date -Format "yyyy.MM.dd"
            $version = "dev-$date-${{ github.run_number }}"
          }
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: powershell

      - name: Configure CMake
        run: |
          call "%VCVARS_PATH%"
          cmake -S . -B build -DCMAKE_PREFIX_PATH="%QT_DIR%"
        shell: cmd

      - name: Build with CMake
        run: |
          call "%VCVARS_PATH%"
          cmake --build build --config Release
        shell: cmd

      - name: Deploy Qt Dependencies
        run: |
          echo "=== Deploying Qt dependencies ==="
          %QT_DIR%\bin\windeployqt.exe --release --no-translations --verbose 2 build/bin/Release/winsys-overlay.exe
          
          echo "=== Verifying deployment structure ==="
          dir build\bin\Release
          
          echo "=== Checking platform plugins ==="
          if exist build\bin\Release\platforms (
            dir build\bin\Release\platforms
            if exist build\bin\Release\platforms\qwindows.dll (
              echo "‚úì qwindows.dll found"
            ) else (
              echo "‚úó qwindows.dll missing"
            )
          ) else (
            echo "‚úó platforms directory missing"
          )
          
          echo "=== Manual platform plugin deployment ==="
          if not exist build\bin\Release\platforms mkdir build\bin\Release\platforms
          copy "%QT_DIR%\plugins\platforms\qwindows.dll" build\bin\Release\platforms\
          copy "%QT_DIR%\plugins\platforms\qminimal.dll" build\bin\Release\platforms\
          
          echo "=== Copying additional required DLLs ==="
          copy "%QT_DIR%\bin\Qt6Core.dll" build\bin\Release\
          copy "%QT_DIR%\bin\Qt6Gui.dll" build\bin\Release\
          copy "%QT_DIR%\bin\Qt6Widgets.dll" build\bin\Release\
          
          echo "=== Final verification ==="
          dir build\bin\Release
          dir build\bin\Release\platforms
        shell: cmd

      - name: Test Application Launch
        run: |
          echo "=== Testing application launch ==="
          cd build\bin\Release
          echo "Current directory:"
          cd
          echo "Files in directory:"
          dir
          echo "Attempting to launch application for 3 seconds..."
          start /wait /b winsys-overlay.exe &
          timeout /t 3 /nobreak > nul
          taskkill /f /im winsys-overlay.exe > nul 2>&1 || echo "Application may have already closed"
          echo "Application test completed"
        shell: cmd
        continue-on-error: true

      - name: Get Pre-compression Size
        run: |
          echo "=== Pre-compression size analysis ==="
          cd build\bin\Release
          powershell -Command "Get-ChildItem -Recurse | Measure-Object -Property Length -Sum | ForEach-Object { 'Total size: {0:N0} bytes ({1:N2} MB)' -f $_.Sum, ($_.Sum / 1MB) }"
        shell: cmd

      - name: Optimize and Compress Release Files
        if: env.UPX_PATH != ''
        run: |
          echo "--- Reducing package size by removing unnecessary files ---"
          del /q /s build\bin\Release\*.pdb > nul 2>&1

          echo "--- Compressing ONLY the main executable (Qt DLLs cause issues with UPX) ---"
          echo "Compressing main executable..."
          "%UPX_PATH%" --best --lzma build/bin/Release/winsys-overlay.exe
          
          echo "--- Skipping Qt DLL compression (causes crashes) ---"
          echo "Qt6Core.dll - SKIPPED (UPX breaks Qt6 DLLs)"
          echo "Qt6Gui.dll - SKIPPED (UPX breaks Qt6 DLLs)" 
          echo "Qt6Widgets.dll - SKIPPED (UPX breaks Qt6 DLLs)"
          
          echo "--- Skipping platform plugin compression (causes crashes) ---"
          echo "qwindows.dll - SKIPPED (UPX breaks Qt6 platform plugins)"
          echo "qminimal.dll - SKIPPED (UPX breaks Qt6 platform plugins)"
          
          echo "--- Compressing other safe files ---"
          if exist build\bin\Release\D3Dcompiler_47.dll (
            echo "Compressing D3Dcompiler_47.dll..."
            "%UPX_PATH%" --best --lzma build/bin/Release/D3Dcompiler_47.dll
          )
          if exist build\bin\Release\opengl32sw.dll (
            echo "Compressing opengl32sw.dll..."
            "%UPX_PATH%" --best --lzma build/bin/Release/opengl32sw.dll
          )

          echo "Skipping .NET assemblies (TempReader.exe, LibreHardwareMonitorLib.dll) as they are not supported by UPX."
        shell: cmd

      - name: Get Post-compression Size
        run: |
          echo "=== Post-compression size analysis ==="
          cd build\bin\Release
          powershell -Command "Get-ChildItem -Recurse | Measure-Object -Property Length -Sum | ForEach-Object { 'Total size: {0:N0} bytes ({1:N2} MB)' -f $_.Sum, ($_.Sum / 1MB) }"
        shell: cmd

      - name: Final Application Test
        run: |
          echo "=== Final application test after compression ==="
          cd build\bin\Release
          echo "Testing compressed application..."
          start /wait /b winsys-overlay.exe &
          timeout /t 3 /nobreak > nul
          taskkill /f /im winsys-overlay.exe > nul 2>&1 || echo "Application may have already closed"
          echo "Final test completed"
        shell: cmd
        continue-on-error: true

      - name: Package with 7-Zip (High Compression)
        id: package_7z
        run: |
          echo "=== Creating 7-Zip archive with maximum compression ==="
          cd build\bin\Release
          set "ARCHIVE_NAME=winsys-overlay-${{ steps.get_version.outputs.VERSION }}.7z"
          echo "Creating archive: %ARCHIVE_NAME%"
          
          if exist "%SEVENZIP_PATH%" (
            echo "Using 7-Zip for maximum compression..."
            "%SEVENZIP_PATH%" a -t7z -m0=lzma2 -mx=9 -mfb=64 -md=32m -ms=on -mmt=on "../../../%ARCHIVE_NAME%" *
            
            echo "=== Archive created successfully ==="
            dir "..\..\..\%ARCHIVE_NAME%"
            powershell -Command "$size = (Get-Item '../../../%ARCHIVE_NAME%').Length; 'Archive size: {0:N0} bytes ({1:N2} MB)' -f $size, ($size / 1MB)"
            
            echo "ARCHIVE_7Z=%ARCHIVE_NAME%" >> %GITHUB_OUTPUT%
          ) else (
            echo "7-Zip not found at %SEVENZIP_PATH%, falling back to PowerShell compression"
            powershell -Command "Compress-Archive -Path * -DestinationPath '../../../winsys-overlay-${{ steps.get_version.outputs.VERSION }}.zip' -CompressionLevel Optimal -Force"
            echo "ARCHIVE_7Z=winsys-overlay-${{ steps.get_version.outputs.VERSION }}.zip" >> %GITHUB_OUTPUT%
          )
        shell: cmd

      - name: Package with ZIP (Fallback/Alternative)
        id: package_zip
        run: |
          echo "=== Creating ZIP archive for compatibility ==="
          $archiveName = "winsys-overlay-${{ steps.get_version.outputs.VERSION }}.zip"
          Compress-Archive -Path build/bin/Release/* -DestinationPath $archiveName -CompressionLevel Optimal -Force
          $size = (Get-Item $archiveName).Length
          Write-Host "ZIP Archive size: $($size.ToString('N0')) bytes ($([math]::Round($size / 1MB, 2)) MB)"
          "ARCHIVE_ZIP=$archiveName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: powershell

      - name: Compare Archive Sizes
        run: |
          echo "=== Archive size comparison ==="
          if exist "${{ steps.package_7z.outputs.ARCHIVE_7Z }}" (
            powershell -Command "$size7z = (Get-Item '${{ steps.package_7z.outputs.ARCHIVE_7Z }}').Length; $sizeZip = (Get-Item '${{ steps.package_zip.outputs.ARCHIVE_ZIP }}').Length; $savings = [math]::Round((($sizeZip - $size7z) / $sizeZip) * 100, 1); Write-Host '7-Zip: {0:N0} bytes ({1:N2} MB)' -f $size7z, ($size7z / 1MB); Write-Host 'ZIP: {0:N0} bytes ({1:N2} MB)' -f $sizeZip, ($sizeZip / 1MB); Write-Host 'Space saved with 7-Zip: {0}%' -f $savings"
          )
        shell: cmd

      - name: Upload 7-Zip Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: winsys-overlay-build-7z
          path: ${{ steps.package_7z.outputs.ARCHIVE_7Z }}

      - name: Upload ZIP Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: winsys-overlay-build-zip
          path: ${{ steps.package_zip.outputs.ARCHIVE_ZIP }}

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.package_7z.outputs.ARCHIVE_7Z }}
            ${{ steps.package_zip.outputs.ARCHIVE_ZIP }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for version ${{ github.ref_name }}.
            
            ## Download Options:
            - **üóúÔ∏è winsys-overlay-${{ github.ref_name }}.7z** - Smallest size (7-Zip format, maximum compression)
            - **üì¶ winsys-overlay-${{ github.ref_name }}.zip** - Standard ZIP format for compatibility
            
            Both archives contain the same files. Choose 7z for smallest download size or ZIP for better compatibility.
