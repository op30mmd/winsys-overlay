cmake_minimum_required(VERSION 3.16)

project(WinSysOverlay LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

# Enable Link-Time Optimization (LTO) for smaller executables
include(CheckIPOSupported)
check_ipo_supported(RESULT ipo_supported)
if(ipo_supported)
  set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
  message(STATUS "IPO/LTO enabled.")
endif()

find_package(Qt6 REQUIRED COMPONENTS Widgets)

add_executable(winsys-overlay WIN32
    main.cpp
    overlaywidget.h
    overlaywidget.cpp
    sysinfomonitor.h
    sysinfomonitor.cpp
    settingsdialog.h
    settingsdialog.cpp
)

# Link against the Performance Data Helper library on Windows
target_link_libraries(winsys-overlay PRIVATE Qt6::Widgets pdh)

if(WIN32)
    include(GNUInstallDirs)
    install(TARGETS winsys-overlay
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    )

    # --- New, More Robust Deployment Method ---

    # 1. Define the content for a deployment script.
    #    This script will be generated at build-time with the correct paths.
    set(DEPLOY_SCRIPT_CONTENT
"
# This script is generated by CMakeLists.txt to run windeployqt safely.
execute_process(
    COMMAND \"${Qt6_windeployqt_EXECUTABLE}\"
        --release
        --no-translations
        --no-opengl-sw
        --no-system-d3d-compiler
        --no-vc-redist
        --dir \"$<TARGET_FILE_DIR:winsys-overlay>\"
        \"$<TARGET_FILE:winsys-overlay>\"
    RESULT_VARIABLE result
)

if(NOT result EQUAL 0)
    message(FATAL_ERROR \"windeployqt failed with exit code: ${result}\")
endif()
"
    )

    # 2. Create a command to generate the script file in the build directory.
    #    This uses generator expressions to ensure paths are correct for the configuration (e.g., Release).
    file(GENERATE
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/deploy-$<CONFIG>.cmake
        CONTENT "${DEPLOY_SCRIPT_CONTENT}"
    )

    # 3. Add the post-build step to execute the generated script using cmake.
    #    This is a much more reliable way to run complex commands with MSBuild.
    add_custom_command(TARGET winsys-overlay POST_BUILD
        COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/deploy-$<CONFIG>.cmake
        COMMENT "Running optimized windeployqt via script on $<TARGET_FILE_NAME:winsys-overlay>..."
        VERBATIM
    )
endif()
